from typing import Union

import numpy as np

from pyrep_ext.const import ObjectType, RenderMode
from pyrep_ext.objects.object import Object


class VisionSensor(Object):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._resolution = np.array(
            self._sim_api.getVisionSensorRes(self._handle)
        )

    @property
    def resolution(self) -> np.ndarray:
        return self._resolution

    def _get_requested_type(self) -> ObjectType:
        return ObjectType.VISION_SENSOR

    def handle_explicitly(self) -> None:
        pass

    def get_resolution(self) -> np.ndarray:
        """Returns the resolution of the images generated by this sensor

        Returns
        -------
            np.ndarray
                The resolution of the sensor as a numpy array
        """
        return np.array(self._sim_api.getVisionSensorRes(self._handle))

    def set_resolution(self, resolution: Union[np.ndarray, list]) -> None:
        """Sets the resolution of this sensor to a given value

        Parameters
        ----------
            resolution: np.ndarray
                The new resolution for this sensor
        """
        if isinstance(resolution, list):
            self._sim_api.setIntArrayProperty(
                self._handle, "resolution", resolution
            )
        elif isinstance(resolution, np.ndarray):
            self._sim_api.setIntArrayProperty(
                self._handle, "resolution", resolution.tolist()
            )
        self._resolution = np.array(resolution)

    def is_perspective(self) -> bool:
        """Gets whether this sensor is in perspective mode

        Returns
        -------
            bool
                The perspective mode for this sensor. True means Perspective,
                False means Orthographic
        """
        return self._sim_api.getBoolProperty(self._handle, "perspective")

    def get_render_mode(self) -> RenderMode:
        """Returns the type of renderer used by this sensor

        Returns
        -------
            RenderMode
                The render mode used by this sensor
        """
        render_mode = self._sim_api.getIntProperty(self._handle, "renderMode")
        return RenderMode(render_mode)

    def set_render_mode(self, render_mode: RenderMode) -> None:
        """Select the given render mode for this sensor

        Parameters
        ----------
            render_mode: RenderMode
                The type of renderer used by this sensor
        """
        self._sim_api.setIntProperty(
            self._handle, "renderMode", render_mode.value
        )

    def capture_rgb(self) -> np.ndarray:
        enc_image, resolution = self._sim_api.getVisionSensorImg(self._handle)
        if isinstance(enc_image, str):
            enc_image = enc_image.encode()
        image = np.frombuffer(enc_image, dtype=np.uint8).reshape(
            resolution[1], resolution[0], 3
        )
        image = np.flip(image, 0).copy()
        return image
